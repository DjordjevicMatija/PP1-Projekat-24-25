package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;

parser code {:
    boolean errorDetected = false;
    Logger log = Logger.getLogger(getClass());

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal SEMICOLON, COLON, COMMA, DOT, LPARENT, RPARENT, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal PROG, CLASS, CONST, NEW, RETURN, VOID, EXTENDS, SET, UNION, MAP, INTERFACE;
terminal BREAK, IF, ELSE, CONTINUE, DO, WHILE;
terminal PRINT, READ;
terminal PLUS, MINUS, MUL, DIV, MOD, INC, DEC, ASSIGN;
terminal AND, OR;
terminal EQUALS, NOT_EQUALS, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOL;
terminal String IDENT;

nonterminal Program;
nonterminal ProgName;
nonterminal DeclList;
nonterminal Decl;
nonterminal ConstDecl;
nonterminal Type;
nonterminal ConstList;
nonterminal Const;
nonterminal VarDecl;
nonterminal VarList;
nonterminal Var;
nonterminal MethodDeclList;
nonterminal MethodDecl;
nonterminal MethodSignature;
nonterminal MethodName;
nonterminal MethodPars;
nonterminal FormPars;
nonterminal FormParam;
nonterminal MethodVarDeclList;
nonterminal StatementList;
nonterminal Statement;

Program ::= (Program)
    PROG ProgName:pName DeclList LBRACE MethodDeclList RBRACE
;

ProgName ::= (ProgName)
    IDENT:progName
;

DeclList ::=
    (DeclarationList) DeclList Decl
    | (NoDeclarationList) /* epsilon */
;

Decl ::=
    (ConstDeclaration) ConstDecl
    | (VarDeclaration) VarDecl
;

ConstDecl ::=
    (ConstantDeclaration) CONST Type ConstList SEMICOLON
    | (ErrorConstDeclSemi) CONST error:err SEMICOLON
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji globalne konstante na liniji " + errleft); :}
;

Type ::= (Type)
    IDENT:typeName
;

ConstList ::=
    (ConstantList) ConstList COMMA Const
    | (SingleConst) Const
    | (ErrorConstDeclComma) error:err
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji globalne konstante na liniji " + errleft); :}
;

Const ::=
    (NumberConst) IDENT:constName ASSIGN NUMBER
    | (CharConst) IDENT:constName ASSIGN CHAR
    | (BoolConst) IDENT:constName ASSIGN BOOL
;

VarDecl ::=
    (VariableDeclaration) Type VarList SEMICOLON
    | (ErrorVarDeclSemi) error:err SEMICOLON
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji promenljive na liniji " + errleft); :}
;

VarList ::=
    (VariableList) VarList COMMA Var
    | (SingleVar) Var
;

Var ::=
    (VarElem) IDENT:varName
    | (VarArray) IDENT:varName LBRACKET RBRACKET
    | (ErrorVarDeclComma) error:err
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji promenljive na liniji " + errleft); :}
;

MethodDeclList ::=
    (MethodDeclarationList) MethodDeclList MethodDecl
    | (NoMethodDeclarationList) /* epsilon */
;

MethodDecl ::= (MethodDecl)
    MethodSignature:mSignature MethodVarDeclList LBRACE StatementList RBRACE
;

MethodSignature ::= (MethodSignature)
    MethodName:mName LPARENT MethodPars RPARENT
;

MethodName ::=
    (TypeMethodName) Type:returnType IDENT:methodName
    | (VoidMethodName) VOID IDENT:methodName
;

MethodPars ::=
    (MethodParameters) FormPars
    | (NoMethodParameters) /* epsilon */
;

FormPars ::=
    (FormParamList) FormPars COMMA FormParam
    | (SingleFormParam) FormParam
;

FormParam ::=
    (FormParamElement) Type:paramType IDENT:paramName
    | (FormParamArray) Type:paramType IDENT:paramName LBRACKET RBRACKET
    | (ErrorFormParameter) error:err
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji parametara metode na liniji " + errleft); :}
;

MethodVarDeclList ::=
    (MethodVarDeclarations) MethodVarDeclList VarDecl
    | (NoMethodVarDeclarations) /* epsilon */
;

StatementList ::=
    (Statements) StatementList Statement
    | (NoStatements) /* epsilon */
;

Statement ::=
    IDENT
;